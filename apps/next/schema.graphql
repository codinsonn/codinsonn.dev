scalar Date

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input GetRequestContextArgs {
  """Echoes back the input"""
  echo: String
}

type ClerkActor {
  """
  issuer - the Frontend API URL of your instance (e.g. https://clerk.your-site.com if production instance, https://your-site.clerk.accounts.dev if development instance).
  """
  iss: String!

  """
  session ID - the ID of the current impersonated user session (e.g. sess_123).
  """
  sid: String!

  """
  subject - the ID of the impersonated user of the session (e.g. user_123).
  """
  sub: String!
}

type ClerkSessionClaims {
  """
  authorized party - the Origin header that was included in the original Frontend API request made from the user. Most commonly, it will be the URL of the application (e.g. https://example.com). This claim could be omitted if, for privacy-related reasons, Origin is empty or null.
  """
  azp: String

  """
  expiration time - the time after which the token will expire, as a Unix timestamp. Determined using the Token lifetime JWT template setting in the Clerk Dashboard.
  """
  exp: Float!

  """
  issued at - the time at which the token was issued, as a Unix timestamp (e.g. 1516239022).
  """
  iat: Float!

  """
  issuer - the Frontend API URL of your instance (e.g. https://clerk.your-site.com if production instance, https://your-site.clerk.accounts.dev if development instance).
  """
  iss: String!

  """
  not before - the time before which the token is considered invalid, as a Unix timestamp. Determined using the Allowed Clock Skew JWT template setting in the Clerk Dashboard.
  """
  nbf: Float!

  """session ID - the ID of the current session (e.g. sess_123)."""
  sid: String!

  """subject - the ID of the current user of the session (e.g. user_123)."""
  sub: String!

  """
  organization ID - the ID of the currently active organization that the user belongs to. Only present if the user is a member of an organization.
  """
  org_id: String

  """
  organization slug - the slug of the currently active organization that the user belongs to. Only present if the user is a member of an organization.
  """
  org_slug: String

  """
  organization role - the role of the user in the currently active organization. Only present if the user is a member of an organization.
  """
  org_role: String

  """
  actor - will only be included if the user is impersonating another user. See user impersonation for more information: https://clerk.com/docs/custom-flows/user-impersonation#jwt-claims
  """
  act: ClerkActor
}

type ClerkAuthReqContext {
  """
  https://clerk.com/docs/backend-requests/resources/session-tokens#default-session-claims
  """
  sessionClaims: ClerkSessionClaims

  """The ID of the current session (e.g. sess_123)."""
  session_id: String

  """The ID of the current user of the session (e.g. user_123)."""
  user_id: String

  """Whether the current request is a public route (e.g. /api/graphql)."""
  isPublicRoute: Boolean

  """Whether the current request is an API route (e.g. /api/context)."""
  isApiRoute: Boolean
}

type ClerkMiddlewareEvt {
  """The source of the current auth context (e.g. /middleware)"""
  sourcePage: String
}

type ClerkVerificationStatus {
  """The state of the verification."""
  status: String

  """The strategy pertaining to the parent sign-up or sign-in attempt."""
  strategy: String!

  """The redirect URL for an external verification."""
  externalVerificationRedirectURL: String

  """The number of attempts related to the verification."""
  attempts: Float!

  """The last error the verification attempt ran into."""
  error: String

  """The time the verification will expire at."""
  expireAt: Float!

  """The nonce pertaining to the verification."""
  nonce: String
}

type ClerkLinkReference {
  """A unique identifier for the linked resource."""
  id: ID!

  """The type of linked resource."""
  type: String!
}

type ClerkUserEmailAdress {
  """A unique identifier for this clerk user's email address."""
  id: ID!

  """The value of this clerk user's email address."""
  emailAddress: String!

  """
  The state of the verification process of a sign-in or sign-up attempt.: https://clerk.com/docs/references/javascript/verification
  """
  verification: ClerkVerificationStatus

  """
  An object containing information about any other identification that might be linked to this email address.
  """
  linkedTo: [ClerkLinkReference]!
}

type ClerkUserPhoneNumber {
  """A unique identifier for this clerk user's phone number."""
  id: ID!

  """
  The value of this phone number, in E.164 format: https://en.wikipedia.org/wiki/E.164
  """
  phoneNumber: String!

  """
  Set to true if this phone number is reserved for multi-factor authentication (2FA). Set to false otherwise.
  """
  reservedForSecondFactor: Boolean!

  """
  Set to true if this phone number is the default second factor. Set to false otherwise. A user must have exactly one default second factor, if multi-factor authentication (2FA) is enabled.
  """
  defaultSecondFactor: Boolean!

  """
  An object holding information on the verification of this phone number.
  """
  verification: ClerkVerificationStatus

  """
  An object containing information about any other identification that might be linked to this phone number.
  """
  linkedTo: [ClerkLinkReference]!
}

type ClerkExternalAccount {
  """A unique identifier for this external account."""
  id: ID!

  """The identification with which this external account is associated."""
  identificationId: ID!

  """The provider name e.g. google"""
  provider: String!

  """The unique ID of the user in the provider."""
  providerUserId: String!

  """The provided email address of the user."""
  emailAddress: String!

  """The scopes that the user has granted access to."""
  approvedScopes: [String]!

  """The provided first name of the user."""
  firstName: String!

  """The provided last name of the user."""
  lastName: String!

  """The provided avatar URL of the user."""
  avatarUrl: String!

  """The provided username of the user."""
  username: String

  """
  A descriptive label to differentiate multiple external accounts of the same user for the same provider.
  """
  label: String

  """
  An object holding information on the verification of this external account.
  """
  verification: ClerkVerificationStatus
}

type ClerkPublicUserData {
  """The user's first name."""
  firstName: String

  """The user's last name."""
  lastName: String

  """Holds the users profile image or avatar."""
  imageUrl: String

  """
  A getter boolean to check if the user has uploaded an image or one was copied from OAuth. Returns false if Clerk is displaying an avatar for the user.
  """
  hasImage: Boolean!

  """The user's identifier."""
  identifier: String!

  """A unique identifier for the user, assigned by clerk"""
  userId: ID
}

type ClerkOrganization {
  """The unique identifier of the related organization."""
  id: ID!

  """The name of the related organization."""
  name: String!

  """
  The organization slug. If supplied, it must be unique for the instance.
  """
  slug: String

  """Holds the organization logo or default logo."""
  imageUrl: String

  """
  A getter boolean to check if the organization has an uploaded image. Returns false if Clerk is displaying an avatar for the organization.
  """
  hasImage: Boolean!

  """The number of members the associated organization contains."""
  membersCount: Float!

  """The number of pending invitations to users to join the organization."""
  pendingInvitationsCount: Float!

  """
  A getter boolean to check if the admin of the organization can delete it.
  """
  adminDeleteEnabled: Boolean!

  """Date of the time the organization was created."""
  createdAt: Date!
}

type ClerkOrganizationMembership {
  """A unique identifier for this organization membership."""
  id: ID!

  """The role of the current user in the organization."""
  role: String!

  """Public information about the user that this membership belongs to."""
  publicUserData: ClerkPublicUserData!

  """The Organization object the membership belongs to."""
  organization: ClerkOrganization!

  """Date of the time the membership was created."""
  createdAt: Date!

  """Date of the time the membership was last updated."""
  updatedAt: Date!
}

type ClerkUserProperties {
  """A unique identifier for the user, assigned by clerk"""
  id: ID!

  """The user's first name."""
  firstName: String

  """The user's last name."""
  lastName: String

  """The user's full name."""
  fullName: String

  """The user's username."""
  username: String

  """Holds the users profile image or avatar."""
  imageUrl: String

  """
  A getter boolean to check if the user has uploaded an image or one was copied from OAuth. Returns false if Clerk is displaying an avatar for the user.
  """
  hasImage: Boolean!

  """Information about the user's primary email address."""
  primaryEmailAddress: ClerkUserEmailAdress

  """
  The unique identifier for the EmailAddress that the user has set as primary.
  """
  primaryEmailAddressId: ID

  """
  An array of all the EmailAddress objects associated with the user. Includes the primary.
  """
  emailAdresses: [ClerkUserEmailAdress]!

  """A getter boolean to check if the user has verified an email address."""
  hasVerifiedEmailAddress: Boolean!

  """Information about the user's primary phone number."""
  primaryPhoneNumber: ClerkUserPhoneNumber

  """
  The unique identifier for the PhoneNumber that the user has set as primary.
  """
  primaryPhoneNumberId: ID

  """
  An array of all the PhoneNumber objects associated with the user. Includes the primary.
  """
  phoneNumbers: [ClerkUserPhoneNumber]!

  """A getter boolean to check if the user has verified a phone number."""
  hasVerifiedPhoneNumber: Boolean!

  """
  An array of all the ExternalAccount objects associated with the user via OAuth. Note: This includes both verified & unverified external accounts.
  """
  externalAccounts: [ClerkExternalAccount]!

  """A getter for the user's list of verified external accounts."""
  verifiedExternalAccounts: [ClerkExternalAccount]!

  """A getter for the user's list of unverified external accounts."""
  unverifiedExternalAccounts: [ClerkExternalAccount]!

  """
  A list of OrganizationMemberships representing the list of organizations the user is member with.
  """
  organizationMemberships: [ClerkOrganizationMembership]!

  """A boolean indicating whether the user has a password on their account."""
  passwordEnabled: Boolean!

  """
  A boolean indicating whether the user has enabled TOTP by generating a TOTP secret and verifying it via an authenticator app.
  """
  totpEnabled: Boolean!

  """
  A boolean indicating whether the user has enabled two-factor authentication.
  """
  twoFactorEnabled: Boolean!

  """A boolean indicating whether the user has enabled Backup codes."""
  backupCodeEnabled: Boolean!

  """
  A boolean indicating whether the organization creation is enabled for the user or not.
  """
  createOrganizationEnabled: Boolean!

  """
  A boolean indicating whether the user is able to delete their own account or not.
  """
  deleteSelfEnabled: Boolean!

  """
  Date when the user last signed in. May be empty if the user has never signed in.
  """
  lastSignInAt: Date

  """Date when the user was first created."""
  createdAt: Date!

  """Date when the user was last updated."""
  updatedAt: Date!
}

type GetRequestContextResponse {
  """The auth context provided by clerk in middleware.ts"""
  auth: ClerkAuthReqContext

  """The 'evt' object provider by clerk's authMiddleware >> afterAuth()"""
  evt: ClerkMiddlewareEvt

  """
  The User object holds all of the information for a single user of your application and provides a set of methods to manage their account. Each user has a unique authentication identifier which might be their email address, phone number, or a username. More info: https://clerk.com/docs/references/javascript/user/user#properties
  """
  user: ClerkUserProperties
}

input GetResumeDataByUserSlugArgs {
  """
  the unique slug for a user's resume. Can be used to find and retrieve the resume data with
  """
  slug: String!
}

type ResumeCardData {
  profileImgUrl: String
  displayName: String!
  functionTitle: String!
  location: String!
  pronouns: String
  website: String
  about: String
}

type SocialLinkData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the type of link this is (e.g. custom or social platform key)"""
  socialLinkType: String

  """the username for the platform, if linkType is a social platform"""
  platformUsername: String
}

type ResumeProjectData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title of this project"""
  title: String!

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the client for this project"""
  client: String
}

type ResumeWritingData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title of this project"""
  title: String!

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the publisher for this article"""
  publisher: String
}

type ResumeSpeakingData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title of this project"""
  title: String!

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the event for this talk"""
  event: String

  """the location for this talk"""
  location: String
}

type ResumeAwardData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title of this project"""
  title: String!

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the organisation that presented you with this award"""
  presentedBy: String
}

type ResumeExperienceData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title for this work experience"""
  title: String

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the start date for this work experience"""
  from: String!

  """the end date for this work experience"""
  to: String!

  """the company for this work experience"""
  company: String!

  """the location for this work experience"""
  location: String
}

type ResumeEducationData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title of this project"""
  title: String!

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the start date for this education"""
  from: String!

  """the end date for this education"""
  to: String!

  """the school or institute for this education"""
  institute: String!

  """the location for this education"""
  location: String
}

type ResumeCertificationData {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the title of this project"""
  title: String!

  """the year this project was completed"""
  year: String

  """the collaborators for this project"""
  collaborators: String

  """the description of this project"""
  description: String

  """the date this certificate was issued"""
  issued: String!

  """the expiration date for this certificate"""
  expires: String

  """the name of the certificate"""
  name: String!

  """the issuer of the certificate"""
  issuer: String!
}

type ResumeCTAData {
  """The final title of this to get people to hire you"""
  title: String!

  """The final links where those interested can get in contact to hire you"""
  ctaLinks: [SocialLinkData]!
}

type ResumeData {
  """the unique identifier for this resume"""
  id: ID!

  """the unique slug for this resume"""
  slug: String!

  """General data for the top card of the resume page"""
  generalData: ResumeCardData!

  """the contact links for this resume, like email, phone, socials, etc."""
  contactLinks: [SocialLinkData]!

  """Data for a project to be listed on the resume"""
  projects: [ResumeProjectData]

  """Data for a project to be listed on the resume"""
  sideProjects: [ResumeProjectData]

  """Data for a project to be listed on the resume"""
  writing: [ResumeWritingData]

  """Data for a project to be listed on the resume"""
  speaking: [ResumeSpeakingData]

  """Data for an award to be listed on the resume"""
  awards: [ResumeAwardData]

  """Data for a project to be listed on the resume"""
  features: [ResumeWritingData]

  """Experience data for this resume"""
  workExperience: [ResumeExperienceData]

  """Experience data for this resume"""
  volunteering: [ResumeExperienceData]

  """Data for the educations listed on this resume."""
  education: [ResumeEducationData]

  """Certification for this resume"""
  certifications: [ResumeCertificationData]

  """
  The final CTA title and links for the resume to help people get in touch or get hired
  """
  ctaSection: ResumeCTAData
}

input GetShopifyProductsArgs {
  first: Float
}

type ShopifyMoneyV2 {
  """Decimal money amount."""
  amount: Float

  """Currency of the money."""
  currencyCode: String!
}

type ShopifyProductPriceRange {
  """The lowest variant's price."""
  minVariantPrice: ShopifyMoneyV2!

  """The highest variant's price."""
  maxVariantPrice: ShopifyMoneyV2!
}

type ShopifySEO {
  """The meta description"""
  description: String

  """The SEO title"""
  title: String
}

type ShopifyImage {
  """A unique ID for the image."""
  id: ID

  """
  The original height of the image in pixels. Returns null if the image is not hosted by Shopify.
  """
  height: Float

  """
  The original width of the image in pixels. Returns null if the image is not hosted by Shopify.
  """
  width: Float

  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """
      The location of the image as a URL.
  
  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
  
  All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
  
  If you need multiple variations of the same image, then you can use GraphQL aliases.
  """
  url: String!
}

type ShopifySelectedOption {
  """The name of the option."""
  name: String!

  """The value of the product option."""
  value: String!
}

type ShopifyUnitPriceMeasurement {
  """The type of unit of measurement for the unit price measurement."""
  measuredType: String

  """The quantity unit for the unit price measurement."""
  quantityUnit: String

  """The quantity value for the unit price measurement."""
  quantityValue: Float!

  """The reference unit for the unit price measurement."""
  referenceUnit: String

  """The reference value for the unit price measurement."""
  referenceValue: Float!
}

type ShopifyMetafield {
  """
  The type name of the metafield. Refer to the list of supported types: https://shopify.dev/apps/metafields/definitions/types
  """
  type: String!

  """The date and time when the storefront metafield was created."""
  createdAt: Date!

  """The description of a metafield."""
  description: String

  """Globally unique identifier."""
  id: ID!

  """The unique identifier for the metafield within its namespace."""
  key: String!

  """
  The container for a group of metafields that the metafield is associated with.
  """
  namespace: String!

  """The date and time when the metafield was last updated."""
  updatedAt: Date!

  """
  The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
  """
  value: String!
}

type ShopifyProductVariant {
  """A globally-unique ID."""
  id: ID!

  """The product variant’s title."""
  title: String!

  """Whether the product variant is available for sale."""
  availableForSale: Boolean!

  """
  The barcode (for example, ISBN, UPC, or GTIN) associated with the variant.
  """
  barcode: String

  """
  The compare at price of the variant. This can be used to mark a variant as on sale, when compareAtPrice is higher than price.
  """
  compareAtPrice: ShopifyMoneyV2

  """
  Whether a product is out of stock but still available for purchase (used for backorders).
  """
  currentlyNotInStock: Boolean!

  """
  Image associated with the product variant. This field falls back to the product image if no image is available.
  """
  image: ShopifyImage

  """The product variant’s price."""
  price: ShopifyMoneyV2!

  """The total sellable quantity of the variant for online sales channels."""
  quantityAvailable: Float!

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean!

  """List of product options applied to the variant."""
  selectedOptions: [ShopifySelectedOption]!

  """The SKU (stock keeping unit) associated with the variant."""
  sku: String

  """
  The unit price value for the variant based on the variant's measurement.
  """
  unitPrice: ShopifyMoneyV2

  """The unit price measurement for the variant."""
  unitPriceMeasurement: ShopifyUnitPriceMeasurement

  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float

  """Unit of measurement for weight."""
  weightUnit: String!

  """Returns a metafield found by namespace and key."""
  metafield: ShopifyMetafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields: [ShopifyMetafield]
}

type ShopifyProductOption {
  """Globally unique identifier."""
  id: ID!

  """The name of the product option."""
  name: String!

  """The corresponding value to the product option name."""
  values: [String]!
}

type ShopifyProduct {
  """A globally-unique ID"""
  id: ID!

  """The product’s title."""
  title: String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: String!

  """Indicates if at least one product variant is available for sale."""
  availableForSale: Boolean!

  """The compare at price of the product across all variants."""
  compareAtPriceRange: ShopifyProductPriceRange!

  """The date and time when the product was created."""
  createdAt: Date

  """
  A human-friendly unique string for the Product automatically generated from its title. They are used by the Liquid templating language to refer to objects.
  """
  handle: String!

  """Whether the product is a gift card."""
  isGiftCard: Boolean!

  """
  The URL used for viewing the resource on the shop's Online Store. Returns null if the resource is currently not published to the Online Store sales channel.
  """
  onlineStoreUrl: String

  """The price range"""
  priceRange: ShopifyProductPriceRange!

  """
  A categorization that a product can be tagged with, commonly used for filtering and searching.
  """
  productType: String!

  """The date and time when the product was published to the channel."""
  publishedAt: Date

  """Whether the product can only be purchased with a selling plan."""
  requiresSellingPlan: Boolean!

  """The product's SEO information."""
  seo: ShopifySEO!

  """
  A comma separated list of tags that have been added to the product. Additional access scope required for private apps: unauthenticated_read_product_tags.
  """
  tags: [String]!

  """The total quantity of inventory in stock for this Product."""
  totalInventory: Float!

  """
  The date and time when the product was last modified. A product's updatedAt value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update.
  """
  updatedAt: Date

  """The product’s vendor name."""
  vendor: String!

  """List of the product’s variants."""
  variants: [ShopifyProductVariant]!

  """
  Stripped description of the product, single line with HTML tags removed.
  """
  description: String!

  """
      The featured image for the product.
  
  This field is functionally equivalent to images(first: 1)
  """
  featuredImage: ShopifyImage

  """Returns a metafield found by namespace and key."""
  metafield: ShopifyMetafield

  """
  The metafields associated with the resource matching the supplied list of namespaces and keys.
  """
  metafields: [ShopifyMetafield]

  """List of product options like size, color, etc."""
  options: [ShopifyProductOption]!

  """
  Find a product’s variant based on its selected options. This is useful for converting a user’s selection of product options into a single matching variant. If there is not a variant for the selected options, null will be returned.
  """
  variantBySelectedOptions: ShopifyProductVariant
}

type GetShopifyProductsResponse {
  first: Float
  shopifyProducts: [ShopifyProduct]!
}

input UserBioInput {
  """Slug of bio to fetch"""
  slug: String!
}

type IconLink {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """the type of link this is (e.g. custom or social platform key)"""
  socialLinkType: String

  """the username for the platform, if linkType is a social platform"""
  platformUsername: String

  """Extra classes to add to icon"""
  extraClasses: String
}

type LinkInBio {
  """the unique identifier for this link"""
  id: ID

  """the url of the link"""
  linkUrl: String!

  """an optional name for the link"""
  linkTitle: String

  """the icon key for the link"""
  linkIconKey: String

  """the sort order of the link"""
  sortOrder: Float

  """
  the user id of the user this link belongs to, used for database retrieval
  """
  userId: String

  """
  the user slug of the user this link belongs to, used for database retrieval
  """
  userSlug: String

  """Subtitle of the card for this link"""
  subTitle: String

  """Image url of link"""
  imageUrl: String

  """Is this a featured link?"""
  isFeatured: Boolean
}

type UserBio {
  """Id of bio"""
  id: ID

  """Slug of bio to fetch"""
  slug: String!

  """Title of bio"""
  title: String!

  """Link to title"""
  titleLink: String!

  """Bio text"""
  bioText: String!

  """Image url"""
  imageUrl: String!

  """Icon links"""
  iconLinks: [IconLink]!

  """Links on bio page"""
  linksInBio: [LinkInBio]
}

input HealthCheckArgs {
  """Echoes back the echo argument"""
  echo: String

  """Extra documentation URLs to check against"""
  docsURLs: [String]
}

type HealthCheckResponse {
  """Echoes back the echo argument"""
  echo: String

  """Extra documentation URLs to check against"""
  docsURLs: [String]

  """The status of the server"""
  status: String!

  """Indicates if the server is alive"""
  alive: Boolean!

  """Indicates if the server is kicking"""
  kicking: Boolean!

  """The request URL"""
  requestURL: String

  """The base URL"""
  baseURL: String

  """The path all API routes are under"""
  apiURL: String

  """The GraphQL URL"""
  graphURL: String

  """The docs URL"""
  docsURL: String

  """The port the server is running on"""
  port: Float

  """The debug port the server is running on"""
  debugPort: Float

  """The current server time"""
  now: Date!

  """Time since the server or lambda has started"""
  aliveSince: Date!

  """Time since the server or lambda has started in milliseconds"""
  aliveTime: Float!

  """The timezone of the server"""
  timezone: String

  """The node version"""
  nodeVersion: String

  """The v8 version"""
  v8Version: String

  """The system architecture"""
  systemArch: String

  """The system platform"""
  systemPlatform: String

  """The system release"""
  systemRelease: String

  """The system free memory in bytes"""
  systemFreeMemory: Float

  """The system total memory in bytes"""
  systemTotalMemory: Float

  """The system load average"""
  systemLoadAverage: [Float]
}

input SyncUserBiosFromAirtableArgs {
  """
  Auth key for the syncUserBiosFromAirtable() resolver, first 8 chars of the AIRTABLE_API_KEY
  """
  authKey: String!
}

type MongoBulkWriteResult {
  insertedCount: Float
  matchedCount: Float
  modifiedCount: Float
  deletedCount: Float
  upsertedCount: Float
}

type SyncUserBiosFromAirtableResponse {
  success: Boolean!
  syncedCount: Float!
  syncedSlugs: [String]!

  """The bulk write result from bulk mongodb write operations"""
  syncedIcons: MongoBulkWriteResult!

  """The bulk write result from bulk mongodb write operations"""
  syncedLinks: MongoBulkWriteResult!

  """The bulk write result from bulk mongodb write operations"""
  syncedBios: MongoBulkWriteResult!
}

input UpsertResumeArgs {
  slug: String!
  authKey: String!
}

type MongoUpdateResult {
  acknowledged: Boolean!
  matchedCount: Float!
  modifiedCount: Float!
  upsertedCount: Float!
  upsertedId: String
}

type UpsertResumeResponse {
  success: Boolean!

  """
  https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html
  """
  upsertResult: MongoUpdateResult!

  """Single Source of Truth for the resume screen data"""
  upsertedResume: ResumeData!
}

type Mutation {
  syncUserBiosFromAirtable(args: SyncUserBiosFromAirtableArgs!): SyncUserBiosFromAirtableResponse
  upsertResume(args: UpsertResumeArgs!): UpsertResumeResponse
}

type Query {
  getRequestContext(args: GetRequestContextArgs): GetRequestContextResponse
  getResumeDataByUserSlug(args: GetResumeDataByUserSlugArgs!): ResumeData
  getShopifyProducts(args: GetShopifyProductsArgs): GetShopifyProductsResponse
  getUserBioBySlug(args: UserBioInput!): UserBio
  healthCheck(args: HealthCheckArgs): HealthCheckResponse
}