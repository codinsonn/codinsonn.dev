import { z, aetherSchema, createDataBridge } from 'aetherspace/schemas'

/* --- Descriptions ---------------------------------------------------------------------------- */

const d = {
  {{{descriptions}}}
}

{{jsDocArgsHeader}}
export const {{ResolverName}}Args = aetherSchema('{{ResolverName}}Args', {
  {{{argsSchemaBody}}}
}){{argsDescriptionStatement}}

{{jsDocArgsDescription}}
export type {{ResolverName}}Args = z.infer<typeof {{ResolverName}}Args>

{{jsDocResponseHeader}}
export const {{ResolverName}}Response = aetherSchema('{{ResolverName}}Response', {
  {{{responseSchemaBody}}}
}){{responseDescriptionStatement}}

{{jsDocResponseDescription}}
export type {{ResolverName}}Response = z.infer<typeof {{ResolverName}}Response>

/** --- GraphQL -------------------------------------------------------------------------------- */
/** -i- TODO: Figure out which data you need at '/api/graphql' locally and apply it here */
/** -i- GraphQL {{resolverType}} for the {{resolverName}}() resolver */
export const {{ResolverName}}{{ResolverType}} = `
  {{resolverType}} {{ResolverName}}{{ResolverType}}(${{resolverName}}Args: {{ResolverName}}Args) {
    {{resolverName}}(args: ${{resolverName}}Args) {
      ### Add fields here ###
    }
  }
`

{{jsDocResolverConfigHeader}}
export const {{ResolverName}}DataBridge = createDataBridge({
  resolverName: '{{resolverName}}',
  resolverType: '{{resolverType}}',
  argsSchema: {{ResolverName}}Args,
  responseSchema: {{ResolverName}}Response,
  graphqlQuery: {{ResolverName}}{{ResolverType}},{{{apiPathStatements}}}
})
